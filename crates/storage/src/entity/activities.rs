//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "activities")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub guid: String,
    pub description_guid: String,
    pub begin: String,
    pub end: Option<String>,
    pub duration: Option<i32>,
    pub kind_guid: String,
    pub status_guid: String,
    pub parent_guid: Option<String>,
}

#[derive(DeriveIden)]
pub enum Activities {
    Table,
    Guid,
    DescriptionGuid,
    Begin,
    End,
    Duration,
    KindGuid,
    StatusGuid,
    ParentGuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentGuid",
        to = "Column::Guid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::activities_categories::Entity")]
    ActivitiesCategories,
    #[sea_orm(has_many = "super::activities_tags::Entity")]
    ActivitiesTags,
    #[sea_orm(
        belongs_to = "super::activity_kinds::Entity",
        from = "Column::KindGuid",
        to = "super::activity_kinds::Column::Guid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ActivityKinds,
    #[sea_orm(
        belongs_to = "super::activity_status::Entity",
        from = "Column::StatusGuid",
        to = "super::activity_status::Column::Guid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ActivityStatus,
    #[sea_orm(
        belongs_to = "super::descriptions::Entity",
        from = "Column::DescriptionGuid",
        to = "super::descriptions::Column::Guid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Descriptions,
}

impl Related<super::activities_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ActivitiesCategories.def()
    }
}

impl Related<super::activities_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ActivitiesTags.def()
    }
}

impl Related<super::activity_kinds::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ActivityKinds.def()
    }
}

impl Related<super::activity_status::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ActivityStatus.def()
    }
}

impl Related<super::descriptions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Descriptions.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
