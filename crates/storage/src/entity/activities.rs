#![allow(unused_qualifications)]
//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use chrono::{DateTime, FixedOffset, Utc};
use pace_core::domain::{activity::ActivityKind, status::ActivityStatusKind};
use sea_orm::entity::prelude::*;
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "activities")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub guid: String,
    pub description: String,
    pub begin: DateTime<FixedOffset>,
    pub end: Option<DateTime<FixedOffset>>,
    pub duration: Option<i32>,
    pub kind: ActivityKind,
    pub status: ActivityStatusKind,
    pub parent_guid: Option<String>,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
    pub deleted_at: DateTime<Utc>,
}

#[derive(DeriveIden)]
pub enum Activities {
    Table,
    Guid,
    Description,
    Begin,
    End,
    Duration,
    Kind,
    Status,
    ParentGuid,
    CreatedAt,
    UpdatedAt,
    DeletedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentGuid",
        to = "Column::Guid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::activities_categories::Entity")]
    ActivitiesCategories,
    #[sea_orm(has_many = "super::activities_tags::Entity")]
    ActivitiesTags,
}

impl Related<super::activities_categories::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ActivitiesCategories.def()
    }
}

impl Related<super::activities_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ActivitiesTags.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
